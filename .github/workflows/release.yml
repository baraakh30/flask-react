name: Automated Release

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'DOCUMENTATION.md'
      - '.github/**'
      - 'tests/**'

jobs:
  release:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    permissions:
      contents: write
      pull-requests: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bump2version build twine

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Determine version bump type
      id: version_type
      run: |
        commit_message="${{ github.event.head_commit.message }}"
        if [[ "$commit_message" == *"BREAKING CHANGE"* ]] || [[ "$commit_message" == *"[major]"* ]]; then
          echo "bump_type=major" >> $GITHUB_OUTPUT
        elif [[ "$commit_message" == *"feat:"* ]] || [[ "$commit_message" == *"[minor]"* ]]; then
          echo "bump_type=minor" >> $GITHUB_OUTPUT
        else
          echo "bump_type=patch" >> $GITHUB_OUTPUT
        fi

    - name: Bump version
      run: |
        bump2version ${{ steps.version_type.outputs.bump_type }} --verbose

    - name: Get new version
      id: get_version
      run: |
        python -c "
        import configparser
        config = configparser.ConfigParser()
        config.read('.bumpversion.cfg')
        version = config['bumpversion']['current_version']
        print(f'version={version}')
        print(f'tag=v{version}')
        " >> $GITHUB_OUTPUT

    - name: Check for PAT token
      run: |
        if [ -z "${{ secrets.PAT_TOKEN }}" ]; then
          echo "⚠️ PAT_TOKEN not set! Using GITHUB_TOKEN (may have limited permissions)"
          echo "See GITHUB_TOKENS_SETUP.md for setup instructions"
        else
          echo "✅ PAT_TOKEN is configured"
        fi

    - name: Push changes
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
      run: |
        git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
        git push origin main || echo "Failed to push to main branch"
        git push origin v${{ steps.get_version.outputs.version }} || echo "Failed to push tag"

    - name: Build package
      run: python -m build

    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
      run: |
        gh release create "${{ steps.get_version.outputs.tag }}" \
          --title "Release ${{ steps.get_version.outputs.tag }}" \
          --notes "Automated release ${{ steps.get_version.outputs.tag }}

        Commit: ${{ github.event.head_commit.message }}" \
          --latest

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
